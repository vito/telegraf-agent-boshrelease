[global_tags]
  bosh-job = "<%= name %>"
  bosh-deployment = "<%= spec.deployment %>"
<% p("global_tags").each do |k, v| %>
  <%= k %> = "<%= v %>"
<% end %>

[[outputs.influxdb]]
  urls = ["<%= p("influxdb.url") %>"]
  database = "<%= p("influxdb.database") %>"
  username = "<%= p("influxdb.username") %>"
  password = "<%= p("influxdb.password") %>"
  insecure_skip_verify = <%= p("influxdb.insecure_skip_verify") %>

<% if p("inputs.procstat.pid_file", false) || p("inputs.procstat.exe", false) || p("inputs.procstat.pattern", false) %>
[[inputs.procstat]]
  <% if_p("inputs.procstat.pid_file") do |pf| %>
  pid_file = "<%= pf %>"
  <% end %>

  <% if_p("inputs.procstat.exe") do |exe| %>
  exe = "<%= exe %>"
  <% end %>

  <% if_p("inputs.procstat.pattern") do |pattern| %>
  pattern = "<%= pattern %>"
  <% end %>

  <% if_p("inputs.procstat.process_name") do |pn| %>
  process_name = "<%= pn %>"
  <% end %>

  prefix = "<%= p("inputs.procstat.prefix") %>"
  pid_tag = <%= p("inputs.procstat.pid_tag") %>
  pid_finder = "<%= p("inputs.procstat.pid_finder") %>"
<% end %>

<%
    addr = nil
    if_p("inputs.postgresql.address") { |addr_p| addr = addr_p }
    unless addr
      if_link("postgres") do |postgres_link|
        host_ip = postgres_link.instances[0].address
        username = postgres_link.p("databases.roles").first["name"]
        password = postgres_link.p("databases.roles").first["password"]
        database = postgres_link.p("databases.databases").first["name"]
        addr = "postgres://#{username}:#{password}@#{host_ip}/#{database}"
      end
    end
%>

<% if addr %>
[[inputs.postgresql]]
  address = <%= addr.to_json %>
  ignored_databases = <%= p("inputs.postgresql.ignored_databases").to_json %>
  databases = <%= p("inputs.postgresql.databases").to_json %>
<% end %>

<%
    queries = false
    if_p("inputs.postgresql_extensible.queries") { |query_arr| queries = !query_arr.empty? }

    addr = nil
    if_p("inputs.postgresql_extensible.address") { |addr_p| addr = addr_p }
    unless addr
      if_link("postgres") do |postgres_link|
        host_ip = postgres_link.instances[0].address
        username = postgres_link.p("databases.roles").first["name"]
        password = postgres_link.p("databases.roles").first["password"]
        database = postgres_link.p("databases.databases").first["name"]
        addr = "postgres://#{username}:#{password}@#{host_ip}/#{database}"
      end
    end
%>


<% if addr && queries %>
[[inputs.postgresql_extensible]]
  address = <%= addr.to_json %>
  databases = <%= p("inputs.postgresql_extensible.databases").to_json %>
  outputaddress = <%= p("inputs.postgresql_extensible.outputaddress").to_json %>
  <% p("inputs.postgresql_extensible.queries").each do |query| %>
  [[inputs.postgresql_extensible.query]]
    sqlquery = <%= query["query"].to_json %>
    version = <%= (query["version"] || 0).to_json %>
    withdbname = <%= (!!query["withdbname"]).to_json %>
    tagvalue = <%= (query["tags"] || []).join(",").to_json %>
    measurement = <%= (query["measurement"] || "").to_json %>
  <% end %>
<% end %>

<% if_p("inputs.disk.mount_points") do |mount_points| %>
[[inputs.disk]]
  mount_points=<%= mount_points %>
<% end %>

<% if_p("inputs.net.interfaces") do |ifaces| %>
[[inputs.net]]
  interfaces=<%= ifaces %>
<% end %>
